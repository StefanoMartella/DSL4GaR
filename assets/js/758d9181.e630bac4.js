"use strict";(self.webpackChunkdsl_gamification=self.webpackChunkdsl_gamification||[]).push([[998],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),p=i,g=m["".concat(s,".").concat(p)]||m[p]||d[p]||l;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294),i=t(6010);const l="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,r),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>y});var a=t(7462),i=t(7294),l=t(6010),r=t(2466),o=t(6550),s=t(1980),c=t(7392),u=t(12);function d(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function m(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(l),(0,i.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=m(e),[r,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[s,c]=g({queryString:t,groupId:a}),[d,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,u.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),h=(()=>{const e=s??d;return p({value:e,tabValues:l})?e:null})();(0,i.useEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),f(e)}),[c,f,l]),tabValues:l}}var h=t(2389);const k="tabList__CuJ",b="tabItem_LNqP";function v(e){let{className:n,block:t,selectedValue:o,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.o5)(),m=e=>{const n=e.currentTarget,t=u.indexOf(n),a=c[t].value;a!==o&&(d(n),s(a))},p=e=>{var n;let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}null==(n=t)||n.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>u.push(e),onKeyDown:p,onClick:m},r,{className:(0,l.Z)("tabs__item",b,null==r?void 0:r.className,{"tabs__item--active":o===n})}),t??n)})))}function C(e){let{lazy:n,children:t,selectedValue:a}=e;if(n){const e=t.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=f(e);return i.createElement("div",{className:(0,l.Z)("tabs-container",k)},i.createElement(v,(0,a.Z)({},e,n)),i.createElement(C,(0,a.Z)({},e,n)))}function y(e){const n=(0,h.Z)();return i.createElement(N,(0,a.Z)({key:String(n)},e))}},6897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=t(7462),i=(t(7294),t(3905)),l=t(4866),r=t(5162);const o={sidebar_position:2},s="Left Hand Side (LHS)",c={unversionedId:"getting-started/usage/rule-definition/lhs",id:"getting-started/usage/rule-definition/lhs",title:"Left Hand Side (LHS)",description:"",source:"@site/docs/getting-started/usage/rule-definition/lhs.md",sourceDirName:"getting-started/usage/rule-definition",slug:"/getting-started/usage/rule-definition/lhs",permalink:"/DSL4GaR/docs/getting-started/usage/rule-definition/lhs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/usage/rule-definition/lhs.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Rules Definition",permalink:"/DSL4GaR/docs/category/rules-definition"},next:{title:"Right Hand Side (RHS)",permalink:"/DSL4GaR/docs/getting-started/usage/rule-definition/rhs"}},u={},d=[{value:"Rule Definition",id:"rule-definition",level:2},{value:"LHS Definition",id:"lhs-definition",level:2},{value:"Constraint Types",id:"constraint-types",level:3},{value:"Pattern and constraints",id:"pattern-and-constraints",level:3},{value:"Binding",id:"binding",level:3},{value:"Conditional Elements",id:"conditional-elements",level:3},{value:"Free constraints",id:"free-constraints",level:3}],m={toc:d};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"left-hand-side-lhs"},"Left Hand Side (LHS)"),(0,i.kt)("p",null,"Inside a package it is possible to define a rule (only one per package!). Each rule consists of a ",(0,i.kt)("strong",{parentName:"p"},"Left Hand Side")," (LHS) and a ",(0,i.kt)("strong",{parentName:"p"},"Right Hand Side")," (RHS). The LHS contains all the conditions that lead to the rule execution when they are met; the RHS contains all the consequences of the rule's execution. In this section it is shown how it is possible to leverage on the DLS4Gar APIs to properly define the LHS."),(0,i.kt)("h2",{id:"rule-definition"},"Rule Definition"),(0,i.kt)("p",null,"Before defining the conditions to trigger a rule it is necessary to first declare the rule itself; this can be done with the ",(0,i.kt)("inlineCode",{parentName:"p"},"newRule")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Rule definition" {7-9}',title:'"RuleDefinition.java',"-":!0,Rule:!0,'definition"':!0,"{7-9}":!0},'public static void main(String[] args) {\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    // Imports...\n    // Globals...\n    // Types declaration...\n    .newRule()\n      .name("my_amazing_rule")\n    .end()\n    .getDescr();\n  }\n')),(0,i.kt)("p",null,"The rule can also be enriched by ",(0,i.kt)("a",{parentName:"p",href:"https://docs.drools.org/7.73.0.Final/drools-docs/html_single/index.html#rules-attributes-ref_drl-rules"},"attributes")," such as the salience by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"attribute")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Attributes" {9}',title:'"RuleDefinition.java',"-":!0,'Attributes"':!0,"{9}":!0},'public static void main(String[] args) {\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    // Imports...\n    // Globals...\n    // Types declaration...\n    .newRule()\n      .name("my_amazing_rule")\n      .attribute("salience", "1000")\n      // Other attributes...\n    .end()\n    .getDescr();\n  }\n')),(0,i.kt)("h2",{id:"lhs-definition"},"LHS Definition"),(0,i.kt)("h3",{id:"constraint-types"},"Constraint Types"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"ConstraintType")," instance allows to constraint the fact fields inside the LHS of a rule (i.e. we want a rule to fire when the Drools working memory contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BadgeCollectionConcept")," instance whose name is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"amazing_collection"),").",(0,i.kt)("br",null),"\nThe constraint types provided by the DSL4GaR are the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"LT")," \u27a1\ufe0f Less than"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"LTE")," \u27a1\ufe0f Less than or equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GT")," \u27a1\ufe0f Greater than"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GTE")," \u27a1\ufe0f Grater then or equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EQ")," \u27a1\ufe0f Equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NEQ")," \u27a1\ufe0f Not equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CONTAINS")," \u27a1\ufe0f Contains"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NOT_CONTAINS")," \u27a1\ufe0f Not contains")),(0,i.kt)("p",null,"In the next paragraphs will be shown how they can be used."),(0,i.kt)("h3",{id:"pattern-and-constraints"},"Pattern and constraints"),(0,i.kt)("p",null,"Once the rule is defined inside the package, it is possible to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," method to specify when it must be triggered:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Fact constraints" {14-23}',title:'"RuleDefinition.java',"-":!0,Fact:!0,'constraints"':!0,"{14-23}":!0},'import eu.trentorise.game.model.BadgeCollectionConcept;\nimport eu.trentorise.game.model.Classification;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.EQ;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.NEQ;\n\npublic static void main(String[] args) {\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    .newImport(BadgeCollectionConcept.class).end()\n    .newImport(Classification.class).end()\n    .newRule()\n      .name("my_amazing_rule")\n      .attribute("salience", "1000")\n      .when()\n        .classification()\n            .name(EQ, "green classification")\n            .position(NEQ, 1)\n        .end()\n        .badgeCollection()\n            .name(EQ, "green leaves")\n            .badgeEarnedNotContains("gold-medal-green-1")\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n'))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {8-10}',title:'"my_amazing_rule.drl"',"{8-10}":!0},'package eu.trentorise.game.model\n\nimport eu.trentorise.game.notification.BadgeCollectionConcept\nimport eu.trentorise.game.task.Classification\n\nrule "my_amazing_rule"\n  salience 1000\n  when\n    Classification( name == "green classification", position != 1 )\n    BadgeCollectionConcept( name == "green leaves", badgeEarned not contains "gold-medal-green-1" )\n  then\nend\n')))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the tabs to switch from the Java code to the corresponding generated DRL code.")),(0,i.kt)("admonition",{title:"Constraint patterns",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"For each pattern used inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"when")," method it is necessary to add the relative import inside the package definition (i.e. since the ",(0,i.kt)("inlineCode",{parentName:"p"},"classification")," method is used the ",(0,i.kt)("inlineCode",{parentName:"p"},"newImport")," method must be used to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"Classification")," class).")),(0,i.kt)("p",null,"Each gamification elements has an associated method that allows to apply the constraints to the relative pattern:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Action")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"action()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BadgeCollectionConcept")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"badgeCollection()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Challenge")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"challenge()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Classification")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"classification()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CustomData")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"customData()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Game")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"game()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InputData")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"inputData()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Player")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"player()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PointConcept")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"pointConcept()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Propagation")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"propagation()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Reward")," \u27a1\ufe0f ",(0,i.kt)("inlineCode",{parentName:"li"},"reward()"))),(0,i.kt)("p",null,"All the above methods provide a set of other methods to apply the constraints on the gamification elements.",(0,i.kt)("br",null),"\nFor example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"action()")," method provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"id()")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"name()")," methods to apply the constraints on the relative fields of the action itself. All the available methods can be found ",(0,i.kt)("a",{parentName:"p",href:"./../../../api"},"here"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Of course you don't need to consult the source code every time you need to apply a constraint to a pattern; your IDE will suggest the available methods \ud83d\ude09.")),(0,i.kt)("h3",{id:"binding"},"Binding"),(0,i.kt)("p",null,"In the LHS it is also possible to bind the patterns to variables:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Pattern binding" {6,15}',title:'"RuleDefinition.java',"-":!0,Pattern:!0,'binding"':!0,"{6,15}":!0},'import eu.trentorise.game.model.Classification;\nimport it.univaq.gamification.dsl.binders.ClassificationBind;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.EQ;\n\npublic static void main(String[] args) {\n  final ClassificationBind CLASSIFICATION_BIND = new ClassificationBind("classification");\n\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    .newImport(Classification.class).end()\n    .newRule()\n      .name("my_amazing_rule")\n      .attribute("salience", "1000")\n      .when()\n        .classification(CLASSIFICATION_BIND)\n            .name(EQ, "green classification")\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n'))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {8}',title:'"my_amazing_rule.drl"',"{8}":!0},'package eu.trentorise.game.model\n\nimport eu.trentorise.game.task.Classification\n\nrule "my_amazing_rule"\n  salience 1000\n  when\n    $classification: Classification( name == "green classification", position != 1 )\n    BadgeCollectionConcept( name == "green leaves", badgeEarned not contains "gold-medal-green-1" )\n  then\nend\n')))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Each gamification element has its relative binding class; in this case the ",(0,i.kt)("inlineCode",{parentName:"p"},"ClassificationBind")," class is used to create a binding for a ",(0,i.kt)("inlineCode",{parentName:"p"},"Classification")," instance.")),(0,i.kt)("p",null,"Other then the pattern itself, also its fields can be bound to variables:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Fields binding" {6,16}',title:'"RuleDefinition.java',"-":!0,Fields:!0,'binding"':!0,"{6,16}":!0},'import eu.trentorise.game.model.Classification;\nimport it.univaq.gamification.dsl.binders.Bind;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.EQ;\n\npublic static void main(String[] args) {\n  final Bind CLASSIFICATION_NAME_BIND = new Bind("classificationName");\n\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    .newImport(Classification.class).end()\n    .newRule()\n      .name("my_amazing_rule")\n      .attribute("salience", "1000")\n      .when()\n        .classification()\n            .bindName(CLASSIFICATION_NAME_BIND)\n            .name(EQ, "green classification")\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n'))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {8}',title:'"my_amazing_rule.drl"',"{8}":!0},'package eu.trentorise.game.model\n\nimport eu.trentorise.game.task.Classification\n\nrule "my_amazing_rule"\n  salience 1000\n  when\n    Classification( $classificationName : name, name == "green classification", position != 1 )\n    BadgeCollectionConcept( name == "green leaves", badgeEarned not contains "gold-medal-green-1" )\n  then\nend\n')))),(0,i.kt)("p",null,"For each gamification element it is possible to bind all the relative fields."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In this case the class to define a binding is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Bind")," class.")),(0,i.kt)("p",null,"Furthermore, also the constraints can be bound:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Constraint binding" {6,16}',title:'"RuleDefinition.java',"-":!0,Constraint:!0,'binding"':!0,"{6,16}":!0},'import eu.trentorise.game.model.Classification;\nimport it.univaq.gamification.dsl.binders.Bind;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.EQ;\n\npublic static void main(String[] args) {\n  final Bind IS_GREEN_CLASSIFICATION_BIND = new Bind("isGreenClassification");\n\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    .newImport(Classification.class).end()\n    .newRule()\n      .name("my_amazing_rule")\n      .attribute("salience", "1000")\n      .when()\n        .classification()\n            .name(EQ, "green classification", IS_GREEN_CLASSIFICATION_BIND)\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n'))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {8}',title:'"my_amazing_rule.drl"',"{8}":!0},'package eu.trentorise.game.model\n\nimport eu.trentorise.game.task.Classification\n\nrule "my_amazing_rule"\n  salience 1000\n  when\n    Classification( $isGreenClassification : name == "green classification", position != 1 )\n    BadgeCollectionConcept( name == "green leaves", badgeEarned not contains "gold-medal-green-1" )\n  then\nend\n')))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For each method useful to apply a constraint to a gamification element's field it is possible to pass as last parameter a ",(0,i.kt)("inlineCode",{parentName:"p"},"Bind")," instance.")),(0,i.kt)("h3",{id:"conditional-elements"},"Conditional Elements"),(0,i.kt)("p",null,"If a rule LHS contains multiples patterns their default conjunction is the logical ",(0,i.kt)("inlineCode",{parentName:"p"},"and"),"; it is also possible to use other conjunctions such as ",(0,i.kt)("inlineCode",{parentName:"p"},"or"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"not")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exists"),":"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Conditional Elements" {12-23}',title:'"RuleDefinition.java',"-":!0,Conditional:!0,'Elements"':!0,"{12-23}":!0},'import eu.trentorise.game.model.Action;\nimport eu.trentorise.game.model.Classification;\nimport eu.trentorise.game.model.BadgeCollectionConcept;\nimport static it.univaq.gamification.dsl.builders.lhs.ConstraintType.EQ;\n\npublic static void main(String[] args) {\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name("eu.trentorise.game.model")\n    .newImport(Classification.class).end()\n    .newRule()\n      .name("my_amazing_rule")\n      .when()\n        .or()\n          .action().name(EQ, "walk").end()\n          .action().name(EQ, "run").end()\n        .end()\n        .exists()\n          .classification().name(EQ, "green classification").end()\n        .end()\n        .not()\n          .badgeCollection().badgeEarnedContains("green-badge")\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n'))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {9-11}',title:'"my_amazing_rule.drl"',"{9-11}":!0},'package eu.trentorise.game.model\n\nimport eu.trentorise.game.task.Action\nimport eu.trentorise.game.task.Classification\nimport eu.trentorise.game.task.BadgeCollectionConcept\n\nrule "my_amazing_rule"\n  when\n    Action( name == "walk" ) or Action( name == "run" )\n    exists( Classification( name == "green classification" ) ) \n    not( BadgeCollectionConcept( badgeEarned contains "green-badge" ) ) \n  then\nend\n')))),(0,i.kt)("h3",{id:"free-constraints"},"Free constraints"),(0,i.kt)("p",null,"Sometimes the constraints might be more complex than others; in these cases it is possible to rely on the ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern")," methods that accepts a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," representing the constraint:"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"Java",label:"Java",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="RuleDefinition.java - Free constraint" {11}',title:'"RuleDefinition.java',"-":!0,Free:!0,'constraint"':!0,"{11}":!0},"import eu.trentorise.game.model.InputData;\n\npublic static void main(String[] args) {\n  PackageDescr package = new PackageDescrBuilderImpl()\n    .name(\"eu.trentorise.game.model\")\n    .newImport(Classification.class).end()\n    .newRule()\n      .name(\"my_amazing_rule\")\n      .when()\n        .inputData()\n            .constraint(\"(data['walkDistance'] != null || data['bikeDistance'] != null) && ((data['busDistance'] == null || data['busDistance'] == 0) &&  (data['carDistance'] == null || data['carDistance'] == 0))\")\n        .end()\n      .end()\n    .end()\n    .getDescr();\n  }\n"))),(0,i.kt)(r.Z,{value:"DRL",label:"DRL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="my_amazing_rule.drl" {7}',title:'"my_amazing_rule.drl"',"{7}":!0},"package eu.trentorise.game.model\n\nimport eu.trentorise.game.task.InputData\n\nrule \"my_amazing_rule\"\n  when\n    InputData( (data['walkDistance'] != null || data['bikeDistance'] != null) && ((data['busDistance'] == null || data['busDistance'] == 0) &&  (data['carDistance'] == null || data['carDistance'] == 0)) )\n  then\nend\n")))),(0,i.kt)("admonition",{title:"Heads up",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern")," method should be used only when it is strictly necessary because while using it the main advantages of the DSL are lost (typo checking, autocomplete, etc.).")))}p.isMDXComponent=!0}}]);